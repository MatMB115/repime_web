generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(100)
  image            String?
  email            String    @unique
  emailVerified    DateTime? @map("email_verified") @db.Date
  senha            String?
  contato          String?   @db.VarChar(15)
  is_administrador Boolean   @default(false)
  accounts         Account[]
  tb_residencia    Residencia[]
  sessions         Session[]

  @@map("tb_usuario")
}

model Cidade {
  id              Int            @id @default(autoincrement())
  nome            String         @db.VarChar(50)
  pais            String         @db.VarChar(50)
  uf              String         @db.VarChar(2)
  tb_residencia   Residencia[]
  tb_universidade Universidade[]

  @@map("tb_cidade")
}

model FotoVaga {
  id      Int    @id @default(autoincrement())
  id_vaga Int
  foto    String
  tb_vaga Vaga   @relation(fields: [id_vaga], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tb_foto_vaga")
}

model Residencia {
  id                Int              @id @default(autoincrement())
  nome              String           @db.VarChar(50)
  tem_garagem       Boolean
  end_numero        Int
  end_rua           String           @db.VarChar(75)
  end_bairro        String           @db.VarChar(75)
  end_complemento   String           @db.VarChar(75)
  end_cep           String           @db.VarChar(8)
  tem_animais       Boolean?
  oferece_almoco    Boolean
  oferece_janta     Boolean
  tipo_republica    tipos_rep?
  fundacao          DateTime?        @db.Date
  tem_trote         Boolean?
  tem_diarista      Boolean?
  tempo_de_contrato Int?
  agua_inclusa      Boolean?
  internet_inclusa  Boolean?
  energia_inclusa   Boolean?
  id_cidade         Int
  id_user           String
  tipo              tipos_residencia
  tb_cidade         Cidade           @relation(fields: [id_cidade], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tb_vaga           Vaga[]
  tb_usuario        User       @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tb_residencia")
}

model Universidade {
  id        Int    @id @default(autoincrement())
  id_cidade Int
  nome      String @db.VarChar(100)
  tb_cidade Cidade @relation(fields: [id_cidade], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tb_universidade")
}

model Vaga {
  id            Int        @id @default(autoincrement())
  mensalidade   Float
  descricao     String?
  e_mobiliado   Boolean?
  id_residencia Int
  tb_foto_vaga  FotoVaga[]
  tb_residencia Residencia @relation(fields: [id_residencia], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tb_vaga")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") @unique
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("tb_conta")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tb_sessoes")
}

view residencia_vagas_fotos_cidade {
  id_vaga           Int               @unique
  mensalidade       Float?
  descricao         String?
  id_foto_vaga      Int?
  foto              String?
  id_residencia     Int?
  residencia_nome   String?           @db.VarChar(50)
  tem_garagem       Boolean?
  end_numero        Int?
  end_rua           String?           @db.VarChar(75)
  end_bairro        String?           @db.VarChar(75)
  end_complemento   String?           @db.VarChar(75)
  end_cep           String?           @db.VarChar(8)
  tem_animais       Boolean?
  oferece_almoco    Boolean?
  oferece_janta     Boolean?
  tipo_republica    tipos_rep?
  fundacao          DateTime?         @db.Date
  tem_trote         Boolean?
  tem_diarista      Boolean?
  tempo_de_contrato Int?
  agua_inclusa      Boolean?
  internet_inclusa  Boolean?
  energia_inclusa   Boolean?
  tipo              tipos_residencia?
  id_cidade         Int?
  cidade_nome       String?           @db.VarChar(50)
  pais              String?           @db.VarChar(50)
  uf                String?           @db.VarChar(2)
}

enum tipos_rep {
  masculina
  feminina
  mista
}

enum tipos_residencia {
  republica
  kitnet
}
